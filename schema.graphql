# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

"Any object that describes something with a position implements this interface."
interface Position {
  lat: Float
  lng: Float
}

type Alert {
  affectedId: String!
  alertLevel: AlertLevel!
  description: String!
  distribution: AlertDistribution!
  endDateTime: DateTime!
  id: ID!
  startDateTime: DateTime!
  title: String!
  url: String
}

type AreaJourney {
  departureDate: Date!
  departureTime: Time!
  direction: Direction!
  events: [JourneyEvent]!
  headsign: String
  id: ID!
  lineId: String
  mode: String
  operatorId: String
  routeId: String!
  uniqueVehicleId: VehicleId
  vehicleId: String
}

type Cancellation {
  departureDate: Date!
  direction: Direction!
  id: ID!
  isCancelled: Boolean
  journeyStartTime: Time!
  reason: String
  routeId: String!
}

type Departure {
  dayType: String!
  departureId: Int!
  direction: Direction!
  equipmentColor: String
  equipmentIsRequired: Boolean
  equipmentType: String
  extraDeparture: String!
  id: ID!
  index: Int
  isNextDay: Boolean!
  isTimingStop: Boolean!
  journey: DepartureJourney
  mode: String!
  observedArrivalTime: ObservedArrival
  observedDepartureTime: ObservedDeparture
  operatorId: String
  originDepartureTime: PlannedDeparture
  plannedArrivalTime: PlannedArrival!
  plannedDepartureTime: PlannedDeparture!
  recoveryTime: Int
  routeId: String!
  stop: RouteSegment!
  stopId: String!
  terminalTime: Int
}

type DepartureJourney {
  _numInstance: Int
  departureDate: Date!
  departureTime: Time!
  direction: Direction!
  events: [JourneyEvent!]
  id: ID!
  lineId: String
  mode: String
  originStopId: String
  routeId: String!
  uniqueVehicleId: VehicleId
}

type Equipment {
  _matchScore: Float
  age: Int!
  emissionClass: String!
  emissionDesc: String!
  exteriorColor: String!
  id: ID!
  inService: Boolean
  operatorId: String!
  operatorName: String
  registryNr: String!
  type: String!
  vehicleId: String!
}

type ExceptionDay {
  dayType: String!
  description: String
  effectiveDayTypes: [String!]!
  endTime: Time
  exceptionDate: Date!
  exclusive: Boolean!
  id: ID!
  modeScope: String
  startTime: Time
}

type Journey {
  departureDate: Date!
  departureTime: Time!
  departures: [Departure!]!
  direction: Direction!
  equipment: Equipment
  events: [JourneyEvent!]!
  headsign: String
  id: ID!
  lineId: String
  mode: String
  name: String
  operatorId: String
  originStopId: String
  routeId: String!
  uniqueVehicleId: VehicleId
  vehicleId: String
}

type JourneyEvent implements Position {
  delay: Int
  doorStatus: Boolean
  heading: Int
  id: ID!
  lat: Float
  lng: Float
  nextStopId: String
  receivedAt: DateTime!
  recordedAt: DateTime!
  recordedAtUnix: Int!
  recordedTime: Time!
  velocity: Float
}

type Line {
  _matchScore: Float
  id: ID!
  lineId: String!
  name: String
  routesCount: Int
}

type ObservedArrival {
  arrivalDate: Date!
  arrivalDateTime: DateTime!
  arrivalEvent: JourneyEvent!
  arrivalTime: Time!
  arrivalTimeDifference: Int!
  doorDidOpen: Boolean!
  id: ID!
}

type ObservedDeparture {
  departureDate: Date!
  departureDateTime: DateTime!
  departureEvent: JourneyEvent!
  departureTime: Time!
  departureTimeDifference: Int!
  id: ID!
}

type PlannedArrival {
  arrivalDate: Date!
  arrivalDateTime: DateTime!
  arrivalTime: Time!
  id: ID!
  isNextDay: Boolean
}

type PlannedDeparture {
  departureDate: Date!
  departureDateTime: DateTime!
  departureTime: Time!
  id: ID!
  isNextDay: Boolean
}

type Query {
  alerts(queryId: String, queryType: AlertDistribution, time: Time): [Alert]!
  departures(date: Date!, filter: DepartureFilterInput, stopId: String!): [Departure]!
  equipment(date: Date, filter: EquipmentFilterInput): [Equipment]!
  eventsByBbox(bbox: PreciseBBox!, date: Date!, filters: AreaEventsFilterInput, maxTime: DateTime!, minTime: DateTime!): [AreaJourney]!
  exceptionDays(year: String!): [ExceptionDay]!
  journey(departureDate: Date!, departureTime: Time!, direction: Direction!, routeId: String!, uniqueVehicleId: VehicleId): Journey
  journeys(departureDate: Date!, direction: Direction!, routeId: String!): [Journey]!
  lines(date: Date, filter: LineFilterInput, includeLinesWithoutRoutes: Boolean = false): [Line]!
  route(date: Date!, direction: Direction!, routeId: String!): Route
  routeDepartures(date: Date!, direction: Direction!, routeId: String!, stopId: String!): [Departure]!
  routeGeometry(date: Date!, direction: Direction!, routeId: String!): RouteGeometry
  routeSegments(date: Date!, direction: Direction!, routeId: String!): [RouteSegment]!
  routes(date: Date, filter: RouteFilterInput, line: String): [Route]!
  stop(date: Date!, stopId: String!): Stop
  stops(filter: StopFilterInput): [SimpleStop]!
  stopsByBbox(bbox: BBox!, filter: StopFilterInput): [SimpleStop]!
  vehicleJourneys(date: Date!, uniqueVehicleId: VehicleId!): [VehicleJourney]!
  weeklyDepartures(date: Date!, direction: Direction!, routeId: String!, stopId: String!): [Departure]!
}

type Route {
  _matchScore: Float
  alerts: [Alert!]!
  destination: String
  destinationStopId: String
  direction: Direction!
  id: ID!
  lineId: String!
  mode: String
  name: String
  origin: String
  originStopId: String!
  routeId: String!
}

type RouteGeometry {
  coordinates: [RouteGeometryPoint!]!
  id: ID!
  mode: String
}

type RouteGeometryPoint implements Position {
  lat: Float!
  lng: Float!
}

type RouteSegment implements Position {
  destination: String!
  direction: Direction!
  distanceFromPrevious: Int
  distanceFromStart: Int
  duration: Int
  id: ID!
  isTimingStop: Boolean!
  lat: Float!
  lineId: String
  lng: Float!
  modes: [String]!
  name: String
  originStopId: String
  radius: Float
  routeId: String!
  shortId: String!
  stopId: String!
  stopIndex: Int!
}

type SimpleStop implements Position {
  _matchScore: Float
  id: ID!
  lat: Float!
  lng: Float!
  modes: [String]!
  name: String
  radius: Float
  shortId: String!
  stopId: String!
}

type Stop implements Position {
  id: ID!
  lat: Float!
  lng: Float!
  modes: [String]!
  name: String
  radius: Float
  routes: [StopRoute]!
  shortId: String!
  stopId: String!
}

type StopRoute {
  direction: Direction!
  id: ID!
  isTimingStop: Boolean!
  lineId: String
  mode: String
  originStopId: String
  routeId: String!
}

type VehicleJourney {
  departureDate: Date!
  departureTime: Time!
  direction: Direction!
  headsign: String
  id: ID!
  lineId: String
  mode: String
  nextStopId: String!
  operatorId: String
  originStopId: String
  receivedAt: DateTime!
  recordedAt: DateTime!
  recordedAtUnix: Int!
  recordedTime: Time!
  routeId: String!
  timeDifference: Int!
  uniqueVehicleId: VehicleId
  vehicleId: String
}

enum AlertDistribution {
  DEPARTURE
  NETWORK
  ROUTE
  STOP
}

enum AlertLevel {
  CRISIS
  DISRUPTION
  NOTICE
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

input AreaEventsFilterInput {
  direction: Direction
  routeId: String
}

input DepartureFilterInput {
  direction: Direction
  maxHour: Int
  minHour: Int
  routeId: String
}

input EquipmentFilterInput {
  operatorId: String
  search: String
  vehicleId: String
}

input LineFilterInput {
  includeLinesWithoutRoutes: Boolean
  search: String
}

input RouteFilterInput {
  direction: Direction
  routeId: String
  search: String
}

input StopFilterInput {
  search: String
}


"A Date string in YYYY-MM-DD format. The timezone is assumed to be Europe/Helsinki."
scalar Date

"The direction of a route. An integer of either 1 or 2."
scalar Direction

"A string that defines a bounding box. The coordinates should be in the format `minLng,maxLat,maxLng,minLat` which is compatible with what Leaflet's LatLngBounds.toBBoxString() returns. Toe coordinates will be rounded, use PreciseBBox if this is not desired."
scalar BBox

"A DateTime string in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Timezone will be converted to Europe/Helsinki."
scalar DateTime

"Time is seconds from 00:00:00 in format HH:mm:ss. The hours value can be more than 23. The timezone is assumed to be Europe/Helsinki"
scalar Time

"A string that uniquely identifies a vehicle. The format is [operator ID]/[vehicle ID]. The operator ID is padded to have a length of 4 characters."
scalar VehicleId

"A string that defines a bounding box. The coordinates should be in the format `minLng,maxLat,maxLng,minLat` which is compatible with what Leaflet's LatLngBounds.toBBoxString() returns. The precise bbox is not rounded."
scalar PreciseBBox

"The `Upload` scalar type represents a file upload."
scalar Upload
